import './stencil.core';
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import './stencil.core';

import '@bearer/ui';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface ConnectAction {
      'authId': string;
      'setupId': string;
    }

    interface FeatureAction {
      'attachedFilesRefId': string;
      'authId': string;
      'filesRefId': string;
      'setupId': string;
    }

    interface FeatureDisplay {
      'attachedFilesRefId': string;
      'filesRefId': string;
      'setupId': string;
    }

    interface SetupAction {
      'onSetupSuccess': (detail: any) => void;
      'setupId': string;
    }

    interface SetupDisplay {
      'setupId': string;
    }
  }


    interface HTMLConnectActionElement extends StencilComponents.ConnectAction, HTMLStencilElement {}

    var HTMLConnectActionElement: {
      prototype: HTMLConnectActionElement;
      new (): HTMLConnectActionElement;
    };
    

    interface HTMLFeatureActionElement extends StencilComponents.FeatureAction, HTMLStencilElement {}

    var HTMLFeatureActionElement: {
      prototype: HTMLFeatureActionElement;
      new (): HTMLFeatureActionElement;
    };
    

    interface HTMLFeatureDisplayElement extends StencilComponents.FeatureDisplay, HTMLStencilElement {}

    var HTMLFeatureDisplayElement: {
      prototype: HTMLFeatureDisplayElement;
      new (): HTMLFeatureDisplayElement;
    };
    

    interface HTMLSetupActionElement extends StencilComponents.SetupAction, HTMLStencilElement {}

    var HTMLSetupActionElement: {
      prototype: HTMLSetupActionElement;
      new (): HTMLSetupActionElement;
    };
    

    interface HTMLSetupDisplayElement extends StencilComponents.SetupDisplay, HTMLStencilElement {}

    var HTMLSetupDisplayElement: {
      prototype: HTMLSetupDisplayElement;
      new (): HTMLSetupDisplayElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'connect-action': JSXElements.ConnectActionAttributes;
    'feature-action': JSXElements.FeatureActionAttributes;
    'feature-display': JSXElements.FeatureDisplayAttributes;
    'setup-action': JSXElements.SetupActionAttributes;
    'setup-display': JSXElements.SetupDisplayAttributes;
    }
  }

  namespace JSXElements {

    export interface ConnectActionAttributes extends HTMLAttributes {
      'authId'?: string;
      'onBearer|607e36-poc-google-attach-file|connect|authorized'?: (event: CustomEvent) => void;
      'onBearer|607e36-poc-google-attach-file|connect|revoked'?: (event: CustomEvent) => void;
      'setupId'?: string;
    }

    export interface FeatureActionAttributes extends HTMLAttributes {
      'attachedFilesRefId'?: string;
      'authId'?: string;
      'filesRefId'?: string;
      'onBearer|607e36-poc-google-attach-file|feature|filesSaved'?: (event: CustomEvent) => void;
      'setupId'?: string;
    }

    export interface FeatureDisplayAttributes extends HTMLAttributes {
      'attachedFilesRefId'?: string;
      'filesRefId'?: string;
      'onBearer|607e36-poc-google-attach-file|feature|attachedFilesSaved'?: (event: CustomEvent) => void;
      'setupId'?: string;
    }

    export interface SetupActionAttributes extends HTMLAttributes {
      'onSetupSuccess'?: (detail: any) => void;
      'setupId'?: string;
    }

    export interface SetupDisplayAttributes extends HTMLAttributes {
      'setupId'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'connect-action': HTMLConnectActionElement
    'feature-action': HTMLFeatureActionElement
    'feature-display': HTMLFeatureDisplayElement
    'setup-action': HTMLSetupActionElement
    'setup-display': HTMLSetupDisplayElement
  }

  interface ElementTagNameMap {
    'connect-action': HTMLConnectActionElement;
    'feature-action': HTMLFeatureActionElement;
    'feature-display': HTMLFeatureDisplayElement;
    'setup-action': HTMLSetupActionElement;
    'setup-display': HTMLSetupDisplayElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;